--- linux-2.6.9/security/keys/key.c.orig	2007-02-06 14:17:47.000000000 +0000
+++ linux-2.6.9/security/keys/key.c	2007-02-06 14:33:07.000000000 +0000
@@ -187,6 +187,7 @@ static inline void key_alloc_serial(stru
 		key->serial = 3;
 	key_serial_next = key->serial + 1;
 
+attempt_insertion:
 	parent = NULL;
 	p = &key_serial_tree.rb_node;
 
@@ -201,40 +202,34 @@ static inline void key_alloc_serial(stru
 		else
 			goto serial_exists;
 	}
-	goto insert_here;
+
+	/* we've found a suitable hole - arrange for this key to occupy it */
+	rb_link_node(&key->serial_node, parent, p);
+	rb_insert_color(&key->serial_node, &key_serial_tree);
+
+	spin_unlock(&key_serial_lock);
+	return;
 
 	/* we found a key with the proposed serial number - walk the tree from
 	 * that point looking for the next unused serial number */
  serial_exists:
 	for (;;) {
 		key->serial = key_serial_next;
-		if (key->serial < 2)
-			key->serial = 2;
+		if (key->serial < 3)
+			key->serial = 3;
 		key_serial_next = key->serial + 1;
-
-		if (!parent->rb_parent)
-			p = &key_serial_tree.rb_node;
-		else if (parent->rb_parent->rb_left == parent)
-			p = &parent->rb_parent->rb_left;
-		else
-			p = &parent->rb_parent->rb_right;
+		if (key->serial == 3)
+			goto attempt_insertion;
 
 		parent = rb_next(parent);
 		if (!parent)
-			break;
+			goto attempt_insertion;
 
 		xkey = rb_entry(parent, struct key, serial_node);
 		if (key->serial < xkey->serial)
-			goto insert_here;
+			goto attempt_insertion;
 	}
 
-	/* we've found a suitable hole - arrange for this key to occupy it */
- insert_here:
-	rb_link_node(&key->serial_node, parent, p);
-	rb_insert_color(&key->serial_node, &key_serial_tree);
-
-	spin_unlock(&key_serial_lock);
-
 } /* end key_alloc_serial() */
 
 /*****************************************************************************/
