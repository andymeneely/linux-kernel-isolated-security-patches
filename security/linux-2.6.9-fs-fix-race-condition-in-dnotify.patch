diff -up linux-2.6.9/fs/dnotify.c.orig linux-2.6.9/fs/dnotify.c
--- linux-2.6.9/fs/dnotify.c.orig	2004-10-18 23:53:46.000000000 +0200
+++ linux-2.6.9/fs/dnotify.c	2008-04-22 16:57:00.000000000 +0200
@@ -20,6 +20,9 @@
 #include <linux/init.h>
 #include <linux/spinlock.h>
 #include <linux/slab.h>
+#ifndef __GENKSYMS__
+#include <linux/file.h>
+#endif
 
 int dir_notify_enable = 1;
 
@@ -66,6 +69,7 @@ int fcntl_dirnotify(int fd, struct file 
 	struct dnotify_struct **prev;
 	struct inode *inode;
 	fl_owner_t id = current->files;
+	struct file *f;
 	int error = 0;
 
 	if ((arg & ~DN_MULTISHOT) == 0) {
@@ -92,6 +96,15 @@ int fcntl_dirnotify(int fd, struct file 
 		prev = &odn->dn_next;
 	}
 
+	rcu_read_lock();
+	f = fcheck(fd);
+	rcu_read_unlock();
+	/* we'd lost the race with close(), sod off silently */
+	/* note that inode->i_lock prevents reordering problems
+	 * between accesses to descriptor table and ->i_dnotify */
+	if (f != filp)
+		goto out_free;
+
 	error = f_setown(filp, current->pid, 0);
 	if (error)
 		goto out_free;
diff -up linux-2.6.9/fs/locks.c.orig linux-2.6.9/fs/locks.c
--- linux-2.6.9/fs/locks.c.orig	2008-04-21 14:10:16.000000000 +0200
+++ linux-2.6.9/fs/locks.c	2008-04-22 09:19:03.000000000 +0200
@@ -1486,6 +1486,7 @@ int fcntl_setlk(unsigned int fd, struct 
 	struct file_lock *file_lock = locks_alloc_lock();
 	struct flock flock;
 	struct inode *inode;
+	struct file *f;
 	int error;
 
 	if (file_lock == NULL)
@@ -1560,8 +1561,16 @@ again:
 	 * Attempt to detect a close/fcntl race and recover by
 	 * releasing the lock that was just acquired.
 	 */
+	/*
+	 * we need that spin_lock here - it prevents reordering between
+	 * update of inode->i_flock and check for it done in close().
+	 * rcu_read_lock() wouldn't do.
+	 */
+	spin_lock(&current->files->file_lock);
+	f = fcheck(fd);
+	spin_unlock(&current->files->file_lock);
 	if (!error &&
-	    cmd != F_UNLCK && fcheck(fd) != filp && flock.l_type != F_UNLCK) {
+	    cmd != F_UNLCK && f != filp && flock.l_type != F_UNLCK) {
 		flock.l_type = F_UNLCK;
 		goto again;
 	}
@@ -1631,6 +1640,7 @@ int fcntl_setlk64(unsigned int fd, struc
 	struct file_lock *file_lock = locks_alloc_lock();
 	struct flock64 flock;
 	struct inode *inode;
+	struct file *f;
 	int error;
 
 	if (file_lock == NULL)
@@ -1705,8 +1715,11 @@ again:
 	 * Attempt to detect a close/fcntl race and recover by
 	 * releasing the lock that was just acquired.
 	 */
+	spin_lock(&current->files->file_lock);
+	f = fcheck(fd);
+	spin_unlock(&current->files->file_lock);
 	if (!error &&
-	    cmd != F_UNLCK && fcheck(fd) != filp && flock.l_type != F_UNLCK) {
+	    cmd != F_UNLCK && f != filp && flock.l_type != F_UNLCK) {
 		flock.l_type = F_UNLCK;
 		goto again;
 	}
